# 一个实体类对应两张表，覆盖
spring.main.allow-bean-definition-overriding=true

# 配置数据源，m1为别名，可自定义
spring.shardingsphere.datasource.names=m1

# 配置数据源具体内容，包含连接池、驱动、地址、用户名和密码，注意修改别名
spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://59.110.154.249:3306/course_db?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=1qaz!QAZ

# 指定course表分布情况，actual-真实的， m1是配置数据源的别名，m1.course_1，m1.course_2
spring.shardingsphere.sharding.tables.course.actual-data-nodes=m1.course_$->{1..2}

# 指定course表主键cid，即生成策略SNOWFLAKE-雪花算法
spring.shardingsphere.sharding.tables.course.key-generator.column=cid
spring.shardingsphere.sharding.tables.course.key-generator.type=SNOWFLAKE

# 指定分表策略：约定cid值为偶数添加到course_1表，奇数添加到course_2表
spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column=cid
# 对2取模，得数为0或1，但是自建表示course_1和course_2，所以最后+1
spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression=course_$->{cid % 2+1}

# 打印sql日志
spring.shardingsphere.props.sql.show=true